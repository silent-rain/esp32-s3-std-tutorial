use std::{thread::sleep, time::Duration};

mod asset;
use asset::AssetWebDist;
use wifi::wifi;

use anyhow::bail;
use embedded_svc::{
    http::{
        server::{HandlerError, Request},
        Method,
    },
    io::Write,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::peripherals::Peripherals,
    http::server::{Configuration, EspHttpConnection, EspHttpServer},
    log::EspLogger,
    sys::link_patches,
};

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("wifi-GUEST")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> anyhow::Result<()> {
    link_patches();

    EspLogger::initialize_default();
    log::set_max_level(log::LevelFilter::Info);

    // Get the peripherals
    let peripherals = Peripherals::take()?;
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;

    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, |request| index("/".to_owned(), request))?;

    let routes = [
        "/assets/index-dcH5h-_h.js",
        "/assets/index-Vtyj0uJh.css",
        "/vite.svg",
    ];
    for route in routes.into_iter() {
        server.fn_handler(route, Method::Get, |request| {
            index(request.uri().to_owned(), request)
        })?;
    }

    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        sleep(Duration::from_millis(1000));
    }
}

/// 首页
fn index(
    mut filename: String,
    request: Request<&mut EspHttpConnection<'_>>,
) -> Result<(), HandlerError> {
    if filename.is_empty() || filename == "/" {
        filename = "index.html".to_owned()
    }
    if filename.starts_with('/') {
        filename.remove(0);
    }

    let body = match AssetWebDist::to_bytes(filename.to_string()) {
        Some(v) => v,
        None => "not found".as_bytes().to_vec(),
    };
    let mimetype = match AssetWebDist::mimetype(filename.to_string()) {
        Some(v) => v,
        None => String::new(),
    };
    let content_type = format!("{mimetype}; charset=utf-8");

    let mut response =
        request.into_response(200, Some("OK"), &[("Content-Type", &content_type)])?;

    response.write_all(&body)?;
    Ok(())
}
